"""
Idea recording system.

This module implements a system that:
- Extracts insights from agent conversations
- Formats ideas for inclusion in documentation
- Saves ideas to the documentation folder
"""

import json
import os
import re
import time
import uuid
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any, Set


class IdeaExtractor:
    """Extracts ideas and insights from conversations."""
    
    def __init__(self):
        """Initialize idea extractor."""
        self.patterns = [
            r"(?:key insight|important concept|new idea):?\s*(.*?)(?:$|\n)",
            r"(?:we could|we should|I propose)\s*(.*?)(?:$|\n)",
            r"(?:one approach|a solution|a method)\s*(?:would be|could be|is)?\s*to\s*(.*?)(?:$|\n)",
            r"(?:the main point|the essence|the core concept)\s*(?:is|here is)?\s*(.*?)(?:$|\n)",
        ]
        
    def extract_ideas(self, message: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract ideas from a message.
        
        Args:
            message: Message to analyze
            
        Returns:
            List of extracted ideas
        """
        content = message.get("content", "")
        ideas = []
        
        for pattern in self.patterns:
            matches = re.finditer(pattern, content, re.IGNORECASE)
            for match in matches:
                idea_text = match.group(1).strip()
                if idea_text and len(idea_text) > 20:  # Minimum length threshold
                    ideas.append({
                        "id": str(uuid.uuid4()),
                        "text": idea_text,
                        "source_message_id": message.get("id"),
                        "character_id": message.get("character_id"),
                        "extracted_at": time.time(),
                        "pattern": pattern,
                    })
                    
        return ideas
        
    def extract_ideas_from_conversation(self, conversation: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Extract ideas from an entire conversation.
        
        Args:
            conversation: Conversation data
            
        Returns:
            List of extracted ideas
        """
        ideas = []
        
        for message in conversation.get("messages", []):
            if message.get("role") == "assistant":
                ideas.extend(self.extract_ideas(message))
                
        return ideas


class IdeaFormatter:
    """Formats ideas for inclusion in documentation."""
    
    def __init__(self, docs_dir: str = "docs/obsidian/The Book of Shannon"):
        """Initialize idea formatter.
        
        Args:
            docs_dir: Path to the documentation directory
        """
        self.docs_dir = Path(docs_dir)
        
    def format_idea(self, idea: Dict[str, Any], conversation: Dict[str, Any]) -> str:
        """Format an idea as Obsidian markdown.
        
        Args:
            idea: Idea data
            conversation: Conversation data
            
        Returns:
            Formatted markdown content
        """
        character_id = idea.get("character_id", "unknown")
        character_name = character_id.replace("_", " ").title()
        
        timestamp = datetime.fromtimestamp(idea.get("extracted_at", time.time()))
        date_str = timestamp.strftime("%Y-%m-%d %H:%M:%S")
        
        content = f"# {idea['text'][:50]}...\n\n"
        content += f"## Metadata\n\n"
        content += f"- **Source**: Generated by {character_name}\n"
        content += f"- **Date**: {date_str}\n"
        content += f"- **Conversation**: {conversation.get('prompt', 'Unknown prompt')[:50]}...\n\n"
        content += f"## Content\n\n{idea['text']}\n\n"
        content += f"## Context\n\n"
        
        messages = conversation.get("messages", [])
        context_messages = []
        
        source_message_id = idea.get("source_message_id")
        source_index = -1
        
        for i, message in enumerate(messages):
            if message.get("id") == source_message_id:
                source_index = i
                break
                
        if source_index >= 0:
            start_index = max(0, source_index - 2)
            end_index = min(len(messages), source_index + 2)
            context_messages = messages[start_index:end_index]
        else:
            context_messages = messages[-5:] if len(messages) > 5 else messages
            
        for message in context_messages:
            role = message.get("role", "unknown")
            if role == "assistant":
                character = message.get("character_id", "unknown").replace("_", " ").title()
                content += f"**{character}**: {message.get('content', '')[:200]}...\n\n"
            else:
                content += f"**User**: {message.get('content', '')[:200]}...\n\n"
                
        content += f"## Tags\n\n"
        content += f"#generated #idea #conversation/{conversation.get('id', 'unknown')[:8]} "
        content += f"#character/{character_id} #date/{timestamp.strftime('%Y-%m-%d')}\n"
        
        return content
        
    def generate_filename(self, idea: Dict[str, Any]) -> str:
        """Generate a filename for an idea.
        
        Args:
            idea: Idea data
            
        Returns:
            Filename for the idea
        """
        words = idea["text"].split()[:5]
        filename = " ".join(words)
        
        filename = re.sub(r"[^\w\s-]", "", filename)
        filename = re.sub(r"[-\s]+", " ", filename).strip()
        filename = filename.replace(" ", "-")
        
        timestamp = datetime.fromtimestamp(idea.get("extracted_at", time.time()))
        date_str = timestamp.strftime("%Y%m%d-%H%M%S")
        
        return f"{filename}-{date_str}.md"


class IdeaRecorder:
    """Records ideas to the documentation folder."""
    
    def __init__(
        self, 
        docs_dir: str = "docs/obsidian/The Book of Shannon",
        ideas_subdir: str = "Generated Ideas",
    ):
        """Initialize idea recorder.
        
        Args:
            docs_dir: Path to the documentation directory
            ideas_subdir: Subdirectory for generated ideas
        """
        self.docs_dir = Path(docs_dir)
        self.ideas_dir = self.docs_dir / ideas_subdir
        self.extractor = IdeaExtractor()
        self.formatter = IdeaFormatter(docs_dir)
        
        os.makedirs(self.ideas_dir, exist_ok=True)
        
    def process_conversation(self, conversation: Dict[str, Any]) -> List[str]:
        """Process a conversation and record extracted ideas.
        
        Args:
            conversation: Conversation data
            
        Returns:
            List of paths to recorded idea files
        """
        ideas = self.extractor.extract_ideas_from_conversation(conversation)
        
        recorded_files = []
        for idea in ideas:
            content = self.formatter.format_idea(idea, conversation)
            
            filename = self.formatter.generate_filename(idea)
            
            file_path = self.ideas_dir / filename
            with open(file_path, "w") as f:
                f.write(content)
                
            recorded_files.append(str(file_path))
            print(f"Recorded idea to {file_path}")
            
        return recorded_files
